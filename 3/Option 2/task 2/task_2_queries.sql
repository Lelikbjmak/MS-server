-- Option 2

-- #1
-- Создайте scalar-valued функцию, которая будет принимать в качестве входного параметра id отдела
-- (HumanResources.Department.DepartmentID) и возвращать количество сотрудников, работающих в
-- отделе.create function HumanResources.allStaffFromDepartmentById(@departmentId smallint)returns intas	begin		declare @staffCount int;		set @staffCount = (select count(*) 							FROM HumanResources.EmployeeDepartmentHistory								where DepartmentID = @departmentId									and EndDate is null);		return @staffCount;	endgoselect HumanResources.allStaffFromDepartmentById(1);go-- ---------------------------------------------------------------------------------------------------- #2-- Создайте inline table-valued функцию, которая будет принимать в качестве входного параметра id
-- отдела (HumanResources.Department.DepartmentID), а возвращать сотрудников, которые работают в
-- отделе более 11 лет.create function HumanResources.getEmployersWithExpGreaterThanElevenYears(@departmentId smallint)returns tableas	return (select			E.BusinessEntityID,			E.LoginID,			E.JobTitle,			EDH.DepartmentID,			EDH.StartDate,			case EDH.EndDate				when null then  'present time'				else EDH.EndDate				end as EndDate,			year(GETDATE()) - year(EDH.StartDate) as stage		from HumanResources.EmployeeDepartmentHistory EDH			inner join  HumanResources.Employee E			on E.BusinessEntityID = EDH.BusinessEntityID		where 			EDH.DepartmentID = @departmentId			and			EDH.EndDate is null			and			year(GETDATE()) - year(EDH.StartDate) >= 11 );goselect * from HumanResources.getEmployersWithExpGreaterThanElevenYears(1);-- ---------------------------------------------------------------------------------------------------- #3-- Вызовите функцию для каждого отдела, применив оператор CROSS APPLY. Вызовите функцию для
-- каждого отдела, применив оператор OUTER APPLY.select 	D.DepartmentID,	A.DepartmentStaffNumberfrom HumanResources.Department Dcross apply(	select HumanResources.allStaffFromDepartmentById(D.DepartmentID) as DepartmentStaffNumber	) Ago-- ---------------------------------------------------------------------------------------------------- #4-- Измените созданную inline table-valued функцию, сделав ее multistatement table-valued
-- (предварительно сохранив для проверки код создания inline table-valued функции).create function HumanResources.getEmployersWithExpGreaterThanElevenYearsMultistatement(@departmentId smallint)returns @res table(	BusinessEntityId int,	JobTitle nvarchar(70),	DepartmentId int,	StartDate datetime,	Stage as year(getdate()) - year(StartDate))as	begin		 		 insert into @res 			select				E.BusinessEntityID as BusinessEntityId,				E.JobTitle as JobTitle,				EDH.DepartmentID as DepartmentId,				EDH.StartDate as StartDate			from HumanResources.EmployeeDepartmentHistory EDH				inner join  HumanResources.Employee E				on E.BusinessEntityID = EDH.BusinessEntityID			where 				EDH.DepartmentID = @departmentId				and				EDH.EndDate is null				and				year(GETDATE()) - year(EDH.StartDate) >= 11 			return;	endgoselect * from HumanResources.getEmployersWithExpGreaterThanElevenYearsMultistatement(1);-- --------------------------------------------------------------------------------------------------